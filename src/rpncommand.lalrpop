use std::str::FromStr;
use rug::Complex;
use rug::ops::Pow;
use crate::complex;
use crate::rpn::Calc;
use crate::rpn::Function;
use crate::rpn::RPNCommand;
use crate::rpn::Operation;
use crate::infix::ExprParser;
use crate::infixtree::PR;
use crate::rpncommand::RPNCommand::*;
use crate::rpn::RPT;

grammar(calc: &Calc);

Literal: Option<RPT> = {
    <start:@L> <num:num> <i:i?> <end:@R> => {
        // let (num, i) = (<>);
        let res = match i {
            Some(_) => complex!(format!("(0, {})", num), calc.prec),
            None => complex!(num, calc.prec)
        };
        Some(PR::new(start..end, Number(res)))
        // complex!(format!("{}{}", num, if i.is_some() { "i" } else { "" }), calc.prec)
 },
    <start:@L> "(" <real:num> r"[,+]?" <im:num> i? ")" <end:@R> => Some(PR::new(start..end, Number(complex!(format!("({}, {})", real, im), calc.prec))))
}

pub Command: Option<RPT> = {
    <start:@L> "+" <end:@R> => Some(PR::new(start..end, RPNCommand::Op(Operation::Add))),
    <start:@L> "-" <end:@R> => Some(PR::new(start..end, RPNCommand::Op(Operation::Sub))),
    <start:@L> "*" <end:@R> => Some(PR::new(start..end, RPNCommand::Op(Operation::Mul))),
    <start:@L> "/" <end:@R> => Some(PR::new(start..end, RPNCommand::Op(Operation::Div))),
    <start:@L> "^" <end:@R> => Some(PR::new(start..end, RPNCommand::Op(Operation::Pow))),
    <start:@L> "m" <end:@R> => Some(PR::new(start..end, RPNCommand::Op(Operation::UMinus))),
    <start:@L> <l:Literal> <end:@R> => l /*match l {
        Some(v) => Some(PR::new(start..end, RPNCommand::Number(v))),
        None => None
    }*/,
    <start:@L> <i:identifier> <end:@R> => {
        if i.chars().all(|x| { x == 'r' }) {
            return Some(PR::new(start..end, RPNCommand::Op(Operation::Func(Function::Drop(i.len())))))
        }
        match i {
            "d" => Some(PR::new(start..end, RPNCommand::Duplicate)),
            "s" => Some(PR::new(start..end, RPNCommand::Swap)),
            "clear" => Some(PR::new(start..end, RPNCommand::Clear)),
            "copy" => Some(PR::new(start..end, RPNCommand::Clipboard)),
            "clipboard" => Some(PR::new(start..end, RPNCommand::Clipboard)),
            "name" => Some(PR::new(start..end, RPNCommand::PrettyPrint)),
            "pretty" => Some(PR::new(start..end, RPNCommand::PrettyPrint)),
            "prettyprint" => Some(PR::new(start..end, RPNCommand::PrettyPrint)),
            _ => match Function::find(i.to_string()) {
                     Some(v) => Some(PR::new(start..end, RPNCommand::Op(Operation::Func(v)))),
                     None => Some(PR::new(start..end, RPNCommand::VarGet(i.to_string())))
                 }
         }
     },
//     i => {
//         Some(PR::new(start..end, RPNCommand::VarGet("i".to_string())))
//     },
    <start:@L> "=" <i:identifier> <end:@R> => Some(PR::new(start..end, RPNCommand::VarSet(i.to_string()))),
    <start:@L> <i:infix> <end:@R> => Some(PR::new(start..end, RPNCommand::Infix(PR::new((start + 1)..(end - 1), *match ExprParser::new().parse(calc, i) { Ok(n) => n.item, Err(_) => return None }))))
}

pub Commands: Vec<Option<RPT>> = {
    (<Command>)+
}

match {
    r"'[^']+'" => infix,
    r"-?\d+(\.\d+)?(e-?\d+(\.\d+)?)?" => num,
    "i" => i,
    r"[a-zA-Z]\w*" => identifier
} else {
    r"\s*" => { },
    _
}
