use std::str::FromStr;
use rug::Complex;
use rug::ops::Pow;
use crate::complex;
use crate::rpn::Calc;
use crate::rpn::Function;
use crate::rpn::RPNCommand;
use crate::rpn::Operation;
use crate::infix::ExprParser;

grammar(calc: &Calc);

Literal: Option<Complex> = {
    <num> <i?> => {
        let (num, i) = (<>);
        match i {
            Some(_) => complex!(format!("(0, {})", num), calc.prec),
            None => complex!(num, calc.prec)
        }
        // complex!(format!("{}{}", num, if i.is_some() { "i" } else { "" }), calc.prec)
 },
    "(" <real:num> r"[,+]?" <im:num> i? ")" => complex!(format!("({}, {})", real, im), calc.prec)
}

pub Command: Option<RPNCommand> = {
    "+" => Some(RPNCommand::Op(Operation::Add)),
    "-" => Some(RPNCommand::Op(Operation::Sub)),
    "*" => Some(RPNCommand::Op(Operation::Mul)),
    "/" => Some(RPNCommand::Op(Operation::Div)),
    "^" => Some(RPNCommand::Op(Operation::Pow)),
    "m" => Some(RPNCommand::Op(Operation::UMinus)),
    <l:Literal> => match l {
        Some(v) => Some(RPNCommand::Number(v)),
        None => None
    },
    <i:identifier> => {
        if i.chars().all(|x| { x == 'r' }) {
            return Some(RPNCommand::Op(Operation::Func(Function::Drop(i.len()))))
        }
        match i {
            "d" => Some(RPNCommand::Duplicate),
            "clear" => Some(RPNCommand::Clear),
            _ => match Function::find(i.to_string()) {
                     Some(v) => Some(RPNCommand::Op(Operation::Func(v))),
                     None => Some(RPNCommand::VarGet(i.to_string()))
                 }
         }
     },
//     i => {
//         Some(RPNCommand::VarGet("i".to_string()))
//     },
    "=" <i:identifier> => Some(RPNCommand::VarSet(i.to_string())),
    <infix> => Some(RPNCommand::Number(match ExprParser::new().parse(calc, <>) { Ok(n) => n?, Err(_) => return None }))
}

pub Commands: Vec<Option<RPNCommand>> = {
    (<Command>)+
}

match {
    r"'[^']+'" => infix,
    r"-?\d+(\.\d+)?(e-?\d+(\.\d+)?)?" => num,
    "i" => i,
    r"[a-zA-Z]\w*" => identifier
} else {
    r"\s*" => { },
    _
}
