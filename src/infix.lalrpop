use std::str::FromStr;
use rug::Complex;
use rug::ops::Pow;
use crate::complex;
use crate::rpn::Calc;
use crate::rpn::Function;
use crate::rpn::RPNCommand;
use crate::rpn::Operation;
use crate::infixtree::IPT;
use crate::infixtree::PR;
use crate::infixtree::InfixParseTree::*;

grammar(calc: &Calc);

pub Expr: IPT = {
    <start:@L> <left:Expr> <l:@L> "+" <r:@R> <right:Expr2> <end:@R> => PR::new(start..end, Op(vec![left, right], PR::new(l..r, Operation::Add))),
    <start:@L> <left:Expr> <l:@L> "-" <r:@R> <right:Expr2> <end:@R> => PR::new(start..end, Op(vec![left, right], PR::new(l..r, Operation::Sub))),
    Expr2
}

Expr2: IPT = {
    <start:@L> <left:Expr2> <l:@L> "*" <r:@R> <right:Expr3> <end:@R> => PR::new(start..end, Op(vec![left, right], PR::new(l..r, Operation::Mul))),
    <start:@L> <left:Expr2> <l:@L> "/" <r:@R> <right:Expr3> <end:@R> => PR::new(start..end, Op(vec![left, right], PR::new(l..r, Operation::Div))),
    Expr3
}

Expr3: IPT = {
    <start:@L> <l:@L> "-" <r:@R> <v:Expr3> <end:@R> => PR::new(start..end, Op(vec![v], PR::new(l..r, Operation::UMinus))),
    Expr4
}

Expr4: IPT = {
    <start:@L> <left:Expr4> <l:@L> "^" <r:@R> <right:Expr5> <end:@R> => PR::new(start..end, Op(vec![left, right], PR::new(l..r, Operation::Pow))),
    Expr5
}

Expr5: IPT = {
    <start:@L> <v:Literal> <end:@R> => v,
    <start:@L> <l:@L> <name:Identifier> <r:@R> <args:Arguments> <end:@R> => PR::new(start..end, Op(*args.item, PR::new(l..r, Operation::Func(Function::Unknown(name))))),
    <start:@L> "(" <e:Expr> ")" <end:@R> => e
}

Identifier: String = {
    <v:r"[a-zA-Z]\w*"> => v.to_string()
}

Arguments: PR<Vec<IPT>> = {
    <start:@L> "(" <initial:(<Expr> ",")*> <last:Expr?> ")" <end:@R> => {
        let mut out = vec![];
        for item in initial {
            out.push(item);
        }
        match last {
            Some(v) => {
                out.push(v);
                // Some(out)
                PR::new(start..end, out)
            }
            None => PR::new(start..end, out)
        }
    }
}

Literal: IPT = {
    <start:@L> <v:Float> <end:@R> => PR::new(start..end, Literal(v)),
    <start:@L> "(" <real:Float> r"[,+]?" <im:Float> "i"? ")" <end:@R> => PR::new(start..end, Literal(format!("({}, {})", real, im)))
}

Float: String = {
    <v:Decimal> "e" <em:"-"?> <e:Decimal> => format!("{}e{}{}", v, em.unwrap_or(""), e),
    <v:Decimal> => v
}

Decimal: String = {
    <whole:Digits> => whole,
    <whole:Digits> "." <decimal:Digits> => whole + "." + &decimal
};

Digits: String = {
    <v:r"\d+"> => v.to_string()
}

match {
} else {
    r"\s*" => { },
    "'" => {},
    _
}
